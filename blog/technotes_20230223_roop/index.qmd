---
title: "OOP in R: S3 and R6"
description: |
  Notes on learning OOP in R, and trying to figure out the situation where I can benefit from using OOP.
author: "Chi Zhang"
date: "2023-02-23"
categories: [RSE, Rpkg]
sidebar: false
code-block-bg: false
code-block-border-left: true
format: 
  html:
    toc: true
    toc-depth: 2
    code-fold: false
    code-tools: false
---

Useful references: 

* [Object-oriented Programing](https://adv-r.hadley.nz/oo.html) section in **Advanced R** (version 2) by Hadley Wickham
* [Chapter 2.9 Object Oriented Programming](https://bookdown.org/rdpeng/RProgDA/object-oriented-programming.html) in **Mastering Software Development in R** by Roger D.Peng, Sean Kross, and Brooke Anderson
* [OOP with R6 - The complete guide](https://www.r-bloggers.com/2022/06/object-oriented-programming-oop-in-r-with-r6-the-complete-guide/) blog by Dario Radecic


# Object oriented programing

Why use OOP: polymorphism - same function can be used on different types of input.

Without OOP, if someone wants to add new functionality to for example `summary()`, he needs to ask the original author to change if-else statements inside the summary function. OOP allows any developer to extend the interface for new types of input.

## Terminology 

* Object: individual instances of a class
* Class: type of an object, i.e. what an object is
* Method: a function associated with a particular class, i.e. what the object can do
  * generic method: `mean()` of a vector of numbers is a number, `mean()` of a vector of dates is a date
  * Inherit: a sub-class inherits all the attributes and methods from the super-class. E.g. generalized linear model inherits from a linear model.
  * method dispatch: the process of finding the correct method given a class


**Encapsulated** OOP:

* methods belong to object or classes
* `object.method(arg1, arg2)`
* common in most languages
* **R6**, RC (reference class) are examples of this type

**Functional** OOP:

* methods belong to generic functions
* `generic(object, arg2, arg3)`
* **S3** is an informal implementation of this type



## Base types

Check whether an object is object-oriented, or base object: 

* `is.object()`
* `sloop::otype()`: returns base or S3/S4
* `attr(obj_name, 'class')`: OO objects has a *class attribute*, BO does not.

```{r}
#| label: base types
#| warning: false
#| echo: true

x <- 1:10 # a numeric vector
y <- factor(c('a', 'b'))  # a factor

c(is.object(x), is.object(y))
c(sloop::otype(x), sloop::otype(y))
attr(x, 'class') 
attr(y, 'class')
```


All objects have a **base type**; not all are OO objects.

* `typeof(1:10)` returns 'integer'
* 25 base types in total
  * vectors: e.g. `NULL, logical, integer, double, complex, character, list, raw`
  * functions: e.g. `closure, special, builtin`
  * environments: `environment`
  * S4: `S4`
  * language components, `symbol, language, pairlist`
the rest are less common. 





# S3

Allows the function to return rich results with user-friendly display and programmer-friendly internals.



```{r}
#| label: s3 type
#| warning: false
#| echo: true

y <- factor(c('a','b'))
typeof(y)
attributes(y)
```

Check whether a function is a **generic**: `sloop::ftype()` 

```{r}
#| label: generic
#| warning: false
#| echo: true

sloop::ftype(print)
sloop::ftype(`+`)
```

The generic finds the method (implementation of `print(), summary()` for a specific class) by performing **method dispatch**.

```{r}
#| label: dispatch
#| warning: false
#| echo: true
y <- factor(c('a','b'))
sloop::s3_dispatch(print(y))
```


## Generic or method?

* `generic.class()`, for example: `print.factor()`
* do not call the method directly; use the generic (dispatch) to find it.
* generally has the `.` in the name; however it is not guaranteed     * `t.test()` is a generic like `print()`, as `t.test()` can be used on multiple types of inputs
    * `as.factor()` is not an OO object, hence not S3


#### Check function type with `sloop::ftype()`

```{r}
sloop::ftype(predict) # predict is a generic
sloop::ftype(predict.glm)  # glm (class) method for predict() generic
```


#### Check methods with `methods()`

`methods()` checks all the methods that either: 

* belongs to a generic (the function), such as `plot, predict, t.test`
* belongs to a class (the type of input), such as `lm, ar`

```{r}
methods('predict')  
methods(class = 'lm')
```

Equivalently, use `sloop::s3_methods_*()`, as it gives more information in the output. 

```{r}
sloop::s3_methods_generic('predict') 
sloop::s3_methods_class('lm')
```




# R6

Model data that comes from a web API, and changes come from inside and outside R.


